stages:
  - build
  - test
  - release


build-job:
  tags:
    - docker
  stage: build
  script:
    - echo "creating virtual environment for the project..."
    - virtualenv $(pwd)/venv
    - source $(pwd)/venv/bin/activate
    - echo "Installing requirements..."
    - pip install -r requirements.txt
    - deactivate
  artifacts:
    paths:
      - $(pwd)/venv

test-job:
  tags:
    - docker
  stage: test
  script:
    - echo "Activating virtual environment..."
    - source $(pwd)/venv/bin/activate
    - echo "Running unit tests..."
    - python manage.py test budget
    - echo "Checking the server..."
    - python manage.py runserver &
    - sleep 10
    - curl -sSf http://localhost:8000 > /dev/null && echo "Server is Up"
    - sudo pkill python
    - deactivate
    - echo "All tests successfully passed."


release-job:
  tags:
    - docker
  stage: release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE





************************************************************
image: docker:20.10.17

services:
  - docker:20.10.17-dind

#variables:
 # DOCKER_TLS_CERTDIR: "/certs"
  #CI_REGISTRY_USER: "walidmbarek"
  #CI_REGISTRY_PASSWORD: "walid123$"
  #CI_REGISTRY: "registry.gitlab.com" !!!!!!!!!!!!!!

stages:
  - test
  - build
  #- deploy

unit_test:
  stage: test
  script:
    - echo "Starting unit test"
    # Add your unit testing commands here
    - echo "Test cases completed"





dev_build_image:
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t registry.gitlab.com/test1242319/backdjango .
    - docker push registry.gitlab.com/test1242319/backdjango


************************************************************************************





default:
  image: ubuntu:20.04
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html

  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    - apt -y update
    - apt -y install apt-utils
    - apt -y install net-tools python3.8 python3-pip mysql-client libmysqlclient-dev
    - apt -y upgrade
    - pip3 install -r base.txt


migrations:
  stage: build
  script:
    - python3 manage.py makemigrations
    # - python3 manage.py makemigrations myapp
    - python3 manage.py migrate
    - python3 manage.py check


django-tests:
  stage: test
  script:
    # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
    - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
    # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
    - python3 manage.py test

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production


